$spacing-size-unit: rem;
$spacing-margin-key: "has-margin";
$spacing-padding-key: "has-padding";
$spacing-separator: "-";
$spacing-sizes: ("none", 0), ("auto", auto), ("xxs", 0.125), ("xs", 0.25), ("sm", 0.5), ("md", 1), ("lg", 2), ("xl", 4), ("xxl", 8);
$spacing-positions: ("top", "top"), ("right", "right"), ("bottom", "bottom"), ("left", "left");

@function sizeValue($key, $value) {
  @return if($key == "none" or $key == "auto", $value, $value + $spacing-size-unit);
}

@each $size in $spacing-sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);
  .#{$spacing-margin-key}#{$spacing-separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue) !important;
  }
  @if $sizeKey != "auto" {
    .#{$spacing-padding-key}#{$spacing-separator}#{$sizeKey} {
      padding: sizeValue($sizeKey, $sizeValue) !important;
    }
  }
  @each $position in $spacing-positions {
    $posKey: nth($position, 1);
    $posValue: nth($position, 2);
    .#{$spacing-margin-key}#{$spacing-separator}#{$posKey}#{$spacing-separator}#{$sizeKey} {
      margin-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
    }
    @if $sizeKey != "auto" {
      .#{$spacing-padding-key}#{$spacing-separator}#{$posKey}#{$spacing-separator}#{$sizeKey} {
        padding-#{$posValue}: sizeValue($sizeKey, $sizeValue) !important;
      }
    }
  }
}

// Alias for margin auto horizontaly and verticaly
.has-margin-horizontal-auto {
  @extend .has-margin-left-auto;
  @extend .has-margin-right-auto;
}

.has-margin-vertical-auto {
  @extend .has-margin-top-auto;
  @extend .has-margin-bottom-auto;
}
